name: Build, lint, and test
on:
  workflow_call:
    secrets:
      GHCR_USERNAME:
        required: true
      GHCR_TOKEN:
        required: true
    inputs:
      env:
        required: false
        type: string
        default: "dev"
      name:
        required: false
        type: string
        default: "CI"
      upload:
        required: false
        type: boolean
        default: true
      affectedOnly:
        required: false
        type: boolean
        default: true

env:
  #  NX_CLOUD_DISTRIBUTED_EXECUTION: true
  INPUT_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NX_SKIP_NX_CACHE: ${{ vars.NX_SKIP_NX_CACHE_VALUE }}

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        name: Checkout
        with:
          fetch-depth: 0

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'dev'

      - name: Set Branch Environment
        if: ${{ github.event_name == 'push' }}
        run: echo NX_BRANCH=$GITHUB_REF >> $GITHUB_ENV

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get -y install build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev

      - name: Install Poetry
        run: pipx install poetry==1.4.0

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          architecture: "x64"

      - name: Install Flake8
        run: |
          python -m pip install flake8

      - uses: actions/setup-node@v3.3.0
        with:
          node-version: '18'

      - name: Print node and npm versions
        run: |
          node --version
          npm --version

      - name: Install npm dependencies
        uses: bahmutov/npm-install@v1
        with:
          command: npm ci

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: 'ghcr.io'
          username: "${{ secrets.GHCR_USERNAME }}"
          password: "${{ secrets.GHCR_TOKEN }}"

      #      - run: npx nx-cloud start-ci-run
      #        name: Start CI Run
      #        if: always()

      - name: Lint Affected
        if:  ${{inputs.affectedOnly}}
        run: npx nx affected --target lint

      - name: Build Affected
        if:  ${{inputs.affectedOnly}}
        run: npx nx affected --target build --prod --parallel=false

      - name: Test Affected
        if:  ${{inputs.affectedOnly}}
        run: npx nx affected --target test --parallel=false

      - name: Lint All
        if: ${{!inputs.affectedOnly}}
        run: npx nx run-many --all --target lint --parallel=false

      - name: Build All
        if: ${{!inputs.affectedOnly}}
        run: npx nx run-many --all --target build --prod --parallel=false

      - name: Test All
        if: ${{!inputs.affectedOnly}}
        run: npx nx run-many --all --target test --parallel=false

      #      - name: Lint Build Test Affected
      #        if:  ${{inputs.affectedOnly}}
      #        run: |
      #          # launch processes concurrently and collect ids of processes
      #          npx nx affected --target=lint --parallel &
      #          P1=$!
      #          npx nx affected --target=build --prod --parallel &
      #          P2=$!
      #          npx nx affected --target=test --parallel &
      #          P3=$!
      #          # wait for processes to finish and collect exit codes
      #          wait $P1
      #          S1=$?
      #          wait $P2
      #          S2=$?
      #          wait $P3
      #          S3=$?
      #          # find highest exit code
      #          S_ARR=($S1 $S2 $S3)
      #          S=${S_ARR[0]}
      #          for n in "${S_ARR[@]}" ; do
      #              ((n > S)) && S=$n
      #          done
      #          # return highest exit code
      #          exit $S
      #      - name: Lint Build Test All
      #        if: ${{!inputs.affectedOnly}}
      #        run: |
      #          # launch processes concurrently and collect ids of processes
      #          npx nx run-many --all --target=lint --parallel &
      #          P1=$!
      #          npx nx run-many --all --target=build --prod --parallel &
      #          P2=$!
      #          npx nx run-many --all --target=test --parallel &
      #          P3=$!
      #          # wait for processes to finish and collect exit codes
      #          wait $P1
      #          S1=$?
      #          wait $P2
      #          S2=$?
      #          wait $P3
      #          S3=$?
      #          # find highest exit code
      #          S_ARR=($S1 $S2 $S3)
      #          S=${S_ARR[0]}
      #          for n in "${S_ARR[@]}" ; do
      #              ((n > S)) && S=$n
      #          done
      #          # return highest exit code
      #          exit $S
      #      - name: Stop CI run
      #        run: npx nx-cloud stop-all-agents
      #        if:  always()

      - name: Upload builds
        uses: actions/upload-artifact@v4
        if: ${{inputs.upload}}
        with:
          name: ${{inputs.name}}
          path: dist/
          retention-days: 5
          if-no-files-found: ${{ fromJSON('["warn", "error"]')[!inputs.affectedOnly]}}

#  agents:
#    runs-on: ubuntu-latest
#    name: Worker Node
#    timeout-minutes: 60
#    strategy:
#      matrix:
#        agent: [ 1, 2, 3, 4, 5 ]
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Install dependencies
#        run: sudo apt-get update && sudo apt-get -y install build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev
#
#      - name: Install Poetry
#        run: pipx install poetry==1.4.0
#
#      - name: Install Python
#        uses: actions/setup-python@v4
#        with:
#          python-version: "3.9"
#          architecture: "x64"
#
#      - name: Install Flake8
#        run: |
#          python -m pip install flake8
#
#      - uses: actions/setup-node@v3.3.0
#        with:
#          node-version: '18'
#
#      - name: Print node and npm versions
#        run: |
#          node --version
#          npm --version
#
#      - name: Install npm dependencies
#        uses: bahmutov/npm-install@v1
#        with:
#          useRollingCache: true
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#
#      - name: Login to GHCR
#        uses: docker/login-action@v2
#        with:
#          registry: 'ghcr.io'
#          username: "${{ secrets.GHCR_USERNAME }}"
#          password: "${{ secrets.GHCR_TOKEN }}"
#
#      - name: Start Nx Agent ${{ matrix.agent }}
#        run: npx nx-cloud start-agent
